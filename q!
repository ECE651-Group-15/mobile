[1mdiff --git a/README.md b/README.md[m
[1mindex 0803934..886c1a1 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -9,7 +9,7 @@[m [mThis project is a starting point for a Flutter application.[m
 A few resources to get you started if this is your first Flutter project:[m
 [m
 - [Lab: Write your first Flutter app](https://docs.flutter.dev/get-started/codelab)[m
[31m-- [Cookbook: Useful Flutter samples](https://docs.flutter.dev/cookbook)[m
[32m+[m[32m- [Cookbook: Useful Flut,ter samples](https://docs.flutter.dev/cookbook)[m
 [m
 For help getting started with Flutter development, view the[m
 [online documentation](https://docs.flutter.dev/), which offers tutorials,[m
[1mdiff --git a/android/app/build.gradle b/android/app/build.gradle[m
[1mindex 39f61dc..4803934 100644[m
[1m--- a/android/app/build.gradle[m
[1m+++ b/android/app/build.gradle[m
[36m@@ -45,6 +45,8 @@[m [mandroid {[m
         applicationId "com.example.exchange"[m
         // You can update the following values to match your application needs.[m
         // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.[m
[32m+[m[32m        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"[m
[32m+[m
         minSdkVersion 21[m
         targetSdkVersion flutter.targetSdkVersion[m
         versionCode flutterVersionCode.toInteger()[m
[36m@@ -64,4 +66,8 @@[m [mflutter {[m
     source '../..'[m
 }[m
 [m
[31m-dependencies {}[m
[32m+[m[32mdependencies {[m
[32m+[m[32m    androidTestImplementation('androidx.test.espresso:espresso-core:3.4.0')[m
[32m+[m[32m    androidTestImplementation('androidx.test:runner:1.4.0')[m
[32m+[m[32m    androidTestImplementation('androidx.test:rules:1.4.0')[m
[32m+[m[32m}[m
[1mdiff --git a/lib/common/values/server.dart b/lib/common/values/server.dart[m
[1mindex 3a62562..0e8b2a6 100644[m
[1m--- a/lib/common/values/server.dart[m
[1m+++ b/lib/common/values/server.dart[m
[36m@@ -16,4 +16,5 @@[m [mclass APIConstants {[m
   static const String deleteListing = '$baseUrl/v1/api/listings/delete-listing';[m
   static const String starredListing =[m
       '$baseUrl/v1/api/listing-profile/starred-listings';[m
[32m+[m[32m  static const String updateProfile = '$baseUrl/v1/api/profile/update-profile';[m
 }[m
[1mdiff --git a/test/random_generator.dart b/test/random_generator.dart[m
[1mnew file mode 100644[m
[1mindex 0000000..20ee61d[m
[1m--- /dev/null[m
[1m+++ b/test/random_generator.dart[m
[36m@@ -0,0 +1,27 @@[m
[32m+[m[32mimport 'dart:math';[m
[32m+[m
[32m+[m[32mclass RandomGenerator {[m
[32m+[m[32m  final Random _random = Random();[m
[32m+[m[32m  final List<String> _emailDomains = ['example.com', 'mail.com', 'test.org'];[m
[32m+[m
[32m+[m[32m  // Generate a random string of [length] using letters and digits[m
[32m+[m[32m  String generateString(int length) {[m
[32m+[m[32m    const String chars =[m
[32m+[m[32m        'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';[m
[32m+[m[32m    return List.generate([m
[32m+[m[32m        length, (index) => chars[_random.nextInt(chars.length)]).join();[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  // Generate a random double between [min] and [max][m
[32m+[m[32m  double generateDouble(double min, double max) {[m
[32m+[m[32m    return _random.nextDouble() * (max - min) + min;[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  // Generate a random email address[m
[32m+[m[32m  String generateEmail() {[m
[32m+[m[32m    String userName = generateString(10); // Generate a 10 character username[m
[32m+[m[32m    String domain = _emailDomains[[m
[32m+[m[32m        _random.nextInt(_emailDomains.length)]; // Randomly select a domain[m
[32m+[m[32m    return '$userName@$domain';[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[1mdiff --git a/test/test_auth.dart b/test/test_auth.dart[m
[1mnew file mode 100644[m
[1mindex 0000000..c69f39e[m
[1m--- /dev/null[m
[1m+++ b/test/test_auth.dart[m
[36m@@ -0,0 +1,54 @@[m
[32m+[m[32mimport 'package:exchange/common/utils/utils.dart';[m
[32m+[m[32mimport 'package:exchange/common/values/values.dart';[m
[32m+[m[32mimport 'package:flutter_test/flutter_test.dart';[m
[32m+[m[32mimport 'package:get/get.dart';[m
[32m+[m
[32m+[m[32mimport 'random_generator.dart';[m
[32m+[m
[32m+[m[32mvoid main() {[m
[32m+[m[32m  final randomGenerator = RandomGenerator();[m
[32m+[m
[32m+[m[32m  setUpAll(() async {[m
[32m+[m[32m    Get.testMode = true;[m
[32m+[m[32m  });[m
[32m+[m
[32m+[m[32m  tearDownAll(() {[m
[32m+[m[32m    Get.reset();[m
[32m+[m[32m  });[m
[32m+[m
[32m+[m[32m  group('Login Authentication and Authorization services', () {[m
[32m+[m[32m    late String name;[m
[32m+[m[32m    late String email;[m
[32m+[m[32m    late String phone;[m
[32m+[m[32m    late String password;[m
[32m+[m
[32m+[m[32m    setUp(() {[m
[32m+[m[32m      name = randomGenerator.generateString(10);[m
[32m+[m[32m      email = randomGenerator.generateEmail();[m
[32m+[m[32m      phone = randomGenerator.generateString(10);[m
[32m+[m[32m      password = randomGenerator.generateString(10);[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    // test create profile api[m
[32m+[m[32m    test('test create profile functionality', () async {[m
[32m+[m[32m      // send a request to create a user[m
[32m+[m[32m      var response = await HttpUtil().post([m
[32m+[m[32m        APIConstants.createProfileUrl,[m
[32m+[m[32m        data: {[m
[32m+[m[32m          "email": email,[m
[32m+[m[32m          "name": name,[m
[32m+[m[32m          "password": password,[m
[32m+[m[32m          "phone": phone[m
[32m+[m[32m        },[m
[32m+[m[32m      );[m
[32m+[m
[32m+[m[32m      // check if the response is expected[m
[32m+[m[32m      expect(response["code"], 200);[m
[32m+[m[32m      expect(response["data"]["email"], email);[m
[32m+[m[32m      expect(response["data"]["name"], name);[m
[32m+[m[32m      expect(response["data"]["phone"], phone);[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    // TODO: add more test for update user / delete user / get user / login ....[m
[32m+[m[32m  });[m
[32m+[m[32m}[m
\ No newline at end of file[m
